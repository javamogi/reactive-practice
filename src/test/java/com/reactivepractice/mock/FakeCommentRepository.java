package com.reactivepractice.mock;

import com.reactivepractice.comment.domain.Comment;
import com.reactivepractice.comment.service.port.CommentRepository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeCommentRepository implements CommentRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Comment> data = new ArrayList<>();

    @Override
    public Mono<Comment> save(Comment comment) {
        if(comment.getId() == null || comment.getId().equals(0)){
            Comment newComment = Comment.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .writer(comment.getWriter())
                    .post(comment.getPost())
                    .contents(comment.getContents())
                    .build();
            data.add(newComment);
            return Mono.just(newComment);
        } else {
            data.removeIf(u -> Objects.equals(u.getId(), comment.getId()));
            data.add(comment);
            return Mono.just(comment);
        }
    }

    @Override
    public Mono<Comment> findById(Long id) {
        return Flux.fromIterable(data)
                .filter(comment -> comment.getId().equals(id))
                .next();
    }
}
