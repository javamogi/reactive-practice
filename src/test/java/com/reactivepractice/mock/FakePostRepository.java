package com.reactivepractice.mock;

import com.reactivepractice.post.doamin.Post;
import com.reactivepractice.post.service.port.PostRepository;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakePostRepository implements PostRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Post> data = new ArrayList<>();

    @Override
    public Mono<Post> save(Post post) {
        if(post.getId() == null || post.getId().equals(0)){
            Post newPost = Post.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .title(post.getTitle())
                    .contents(post.getContents())
                    .user(post.getUser())
                    .build();
            data.add(newPost);
            return Mono.just(newPost);
        } else {
            data.removeIf(u -> Objects.equals(u.getId(), post.getId()));
            data.add(post);
            return Mono.just(post);
        }
    }

    @Override
    public Mono<Post> findById(Long id) {
        return Flux.fromIterable(data)
                .filter(post -> post.getId().equals(id))
                .next();
    }

    @Override
    public Flux<Post> findAll() {
        return Flux.fromIterable(data);
    }

    @Override
    public Mono<Void> deleteById(Long id) {
        if(data.removeIf(p -> Objects.equals(p.getId(), id))) {
            return Mono.empty();
        } else {
            throw new NoSuchElementException();
        }
    }
}
