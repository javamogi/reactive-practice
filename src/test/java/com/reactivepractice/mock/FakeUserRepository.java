package com.reactivepractice.mock;

import com.reactivepractice.user.domain.User;
import com.reactivepractice.user.service.port.UserRepository;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = new ArrayList<>();

    @Override
    public Mono<User> save(User user) {
        if(user.getId() == null || user.getId().equals(0)){
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .password(user.getPassword())
                    .name(user.getName())
                    .build();
            data.add(newUser);
            return Mono.just(newUser);
        } else {
            data.removeIf(u -> Objects.equals(u.getId(), user.getId()));
            data.add(user);
            return Mono.just(user);
        }
    }

    @Override
    public Mono<User> findByEmail(String email) {
        return Flux.fromIterable(data)
                .filter(user -> user.getEmail().equals(email))
                .next();
    }

    @Override
    public Mono<User> findById(Long id) {
        return Flux.fromIterable(data)
                .filter(user -> user.getId().equals(id))
                .next();
    }

    @Override
    public Flux<User> findAll() {
        return Flux.fromIterable(data);
    }
}
