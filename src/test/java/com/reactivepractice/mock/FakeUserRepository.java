package com.reactivepractice.mock;

import com.reactivepractice.user.domain.User;
import com.reactivepractice.user.service.port.UserRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.DuplicateKeyException;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;

@Slf4j
public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());
//    private final List<User> data = new CopyOnWriteArrayList<>();

//    @Override
//    public Mono<User> save(User user) {
//        User data = findByEmail(user.getEmail())
//                .flatMap(existUser -> Mono.<User>error(new DuplicateKeyException("already user")))
//                .switchIfEmpty(Mono.defer(() -> addUser(user)))
//                .block();
//        return Mono.just(data);
//    }

    @Override
    public synchronized Mono<User> save(User user) {
        if (data.stream().anyMatch(existingUser -> existingUser.getEmail().equals(user.getEmail()))) {
            return Mono.error(new DuplicateKeyException("already user"));
        }
        if(user.getId() == null || user.getId().equals(0)){
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.getEmail())
                    .password(user.getPassword())
                    .build();
            data.add(newUser);
            return Mono.just(newUser);
        } else {
            data.removeIf(u -> Objects.equals(u.getId(), user.getId()));
            data.add(user);
            return Mono.just(user);
        }
//        return findByEmail(user.getEmail())
//                .flatMap(existUser -> Mono.<User>error(new DuplicateKeyException("already user")))
//                .switchIfEmpty(addUser(user));
    }

//    private synchronized Mono<User> addUser(User user) {
//        if (data.stream().anyMatch(existingUser -> existingUser.getEmail().equals(user.getEmail()))) {
//            return Mono.error(new DuplicateKeyException("already user"));
//        }
//        User newUser = User.builder()
//                .id(autoGeneratedId.incrementAndGet())
//                .email(user.getEmail())
//                .password(user.getPassword())
//                .build();
//        data.add(newUser);
//        return Mono.just(newUser);
//    }
//
//    private Mono<User> modifyUser(User user) {
//        data.removeIf(u -> Objects.equals(u.getId(), user.getId()));
//        data.add(user);
//        return Mono.just(user);
//    }

    @Override
    public Mono<User> findByEmail(String email) {
        return Flux.fromIterable(data)
                .filter(user -> user.getEmail().equals(email))
                .next();
//        return Mono.fromCallable(() -> {
//            synchronized (data) {
//                return data.stream()
//                        .filter(u -> u.getEmail().equals(email))
//                        .findFirst()
//                        .orElse(null);
//            }
//        });
    }
}
